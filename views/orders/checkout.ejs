<%- include('../partials/header') %>

<div class="container py-5">
  <div class="row">
    <div class="col-md-8">
      <div class="card mb-4">
        <div class="card-header bg-primary text-white">
          <h4 class="mb-0">Shipping Information</h4>
        </div>
        <div class="card-body">
          <form id="payment-form">
            <div class="row">
              <div class="col-md-6 mb-3">
                <label for="fullName" class="form-label">Full Name</label>
                <input type="text" class="form-control" id="fullName" required>
              </div>
              <div class="col-md-6 mb-3">
                <label for="email" class="form-label">Email</label>
                <input type="email" class="form-control" id="email" value="<%= user.email %>" readonly>
              </div>
            </div>
            
            <div class="mb-3">
              <label for="address" class="form-label">Address</label>
              <input type="text" class="form-control" id="address" required>
            </div>
            
            <div class="row">
              <div class="col-md-4 mb-3">
                <label for="city" class="form-label">City</label>
                <input type="text" class="form-control" id="city" required>
              </div>
              <div class="col-md-4 mb-3">
                <label for="state" class="form-label">State</label>
                <input type="text" class="form-control" id="state" required>
              </div>
              <div class="col-md-4 mb-3">
                <label for="postalCode" class="form-label">Postal Code</label>
                <input type="text" class="form-control" id="postalCode" required>
              </div>
            </div>
            
            <div class="mb-4">
              <label for="country" class="form-label">Country</label>
              <input type="text" class="form-control" id="country" required>
            </div>
            
            <hr class="my-4">
            
            <h4 class="mb-3">Payment</h4>
            <p class="text-muted mb-4">All transactions are secure and encrypted. Credit card information is never stored on our servers.</p>
            
            <div id="payment-element" class="mb-3">
              <!-- Stripe Elements will be inserted here -->
            </div>
            
            <div id="payment-message" class="alert alert-danger d-none"></div>
            
            <button id="submit-button" class="btn btn-primary btn-lg w-100">
              <div class="spinner d-none" id="spinner">
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span>Processing...</span>
              </div>
              <span id="button-text">Pay Now</span>
            </button>
          </form>
        </div>
      </div>
    </div>
    
    <div class="col-md-4">
      <div class="card">
        <div class="card-header bg-primary text-white">
          <h4 class="mb-0">Order Summary</h4>
        </div>
        <div class="card-body">
          <div class="d-flex justify-content-between mb-3">
            <h5>Items (<%= cart.items.length %>):</h5>
            <h5>₹<%= cart.totalAmount.toLocaleString() %></h5>
          </div>
          
          <div class="d-flex justify-content-between mb-3">
            <h5>Shipping:</h5>
            <h5>Free</h5>
          </div>
          
          <hr>
          
          <div class="d-flex justify-content-between mb-3">
            <h4>Total:</h4>
            <h4>₹<%= cart.totalAmount.toLocaleString() %></h4>
          </div>
          
          <hr>
          
          <h5 class="mb-3">Order Items</h5>
          <ul class="list-group mb-3">
            <% for (const item of cart.items) { %>
              <li class="list-group-item d-flex justify-content-between lh-sm">
                <div>
                  <h6 class="my-0"><%= item.quantity %> x <%= item.product.name %></h6>
                  <small class="text-muted">₹<%= item.price.toLocaleString() %> each</small>
                </div>
                <span class="text-muted">₹<%= (item.price * item.quantity).toLocaleString() %></span>
              </li>
            <% } %>
          </ul>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Stripe JS -->
<script src="https://js.stripe.com/v3/"></script>

<script>
  // Initialize Stripe
  const stripe = Stripe('<%= stripePublishableKey %>');
  let elements;
  let paymentElement;
  let clientSecret;
  
  // Create payment intent when page loads
  document.addEventListener('DOMContentLoaded', async function() {
    try {
      const response = await fetch('/orders/create-payment-intent', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      const data = await response.json();
      
      if (response.ok) {
        clientSecret = data.clientSecret;
        initializeStripeElements(clientSecret);
      } else {
        showMessage(data.error || 'Payment initialization failed');
      }
    } catch (error) {
      console.error('Error:', error);
      showMessage('An unexpected error occurred. Please try again later.');
    }
  });
  
  // Initialize Stripe Elements
  function initializeStripeElements(clientSecret) {
    elements = stripe.elements({ clientSecret });
    
    const style = {
      base: {
        color: '#32325d',
        fontFamily: 'Arial, sans-serif',
        fontSmoothing: 'antialiased',
        fontSize: '16px',
        '::placeholder': {
          color: '#aab7c4'
        }
      },
      invalid: {
        color: '#fa755a',
        iconColor: '#fa755a'
      }
    };
    
    paymentElement = elements.create('payment', { style });
    paymentElement.mount('#payment-element');
  }
  
  // Handle form submission
  const form = document.getElementById('payment-form');
  form.addEventListener('submit', async function(event) {
    event.preventDefault();
    
    setLoading(true);
    
    // Collect shipping details
    const shippingDetails = {
      fullName: document.getElementById('fullName').value,
      address: document.getElementById('address').value,
      city: document.getElementById('city').value,
      state: document.getElementById('state').value,
      postalCode: document.getElementById('postalCode').value,
      country: document.getElementById('country').value
    };
    
    // Confirm payment with Stripe
    const { error, paymentIntent } = await stripe.confirmPayment({
      elements,
      confirmParams: {
        return_url: window.location.origin + '/orders/confirmation',
      },
      redirect: 'if_required'
    });
    
    if (error) {
      showMessage(error.message || 'Payment failed');
      setLoading(false);
      return;
    }
    
    // If we get here, payment was successful
    // Process the order
    try {
      console.log('Payment successful, processing order with ID:', clientSecret.split('_secret_')[0]);
      
      const response = await fetch('/orders/process', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          paymentIntentId: clientSecret.split('_secret_')[0],
          shippingDetails
        })
      });
      
      const orderData = await response.json();
      console.log('Order processing response:', orderData);
      
      if (response.ok && orderData.success) {
        console.log('Redirecting to order details:', `/orders/${orderData.orderId}`);
        window.location.href = `/orders/${orderData.orderId}`;
      } else {
        showMessage(orderData.error || 'Order processing failed');
        setLoading(false);
      }
    } catch (error) {
      console.error('Error processing order:', error);
      showMessage('An unexpected error occurred. Please try again later.');
      setLoading(false);
    }
  });
  
  // Show error message
  function showMessage(messageText) {
    const messageContainer = document.getElementById('payment-message');
    if (messageContainer) {
      messageContainer.textContent = messageText;
      messageContainer.classList.remove('d-none');
      
      setTimeout(function() {
        messageContainer.classList.add('d-none');
        messageContainer.textContent = '';
      }, 6000);
    } else {
      console.error('Message container not found:', messageText);
    }
  }
  
  // Set loading state
  function setLoading(isLoading) {
    const submitButton = document.getElementById('submit-button');
    const spinner = document.getElementById('spinner');
    const buttonText = document.getElementById('button-text');
    
    if (isLoading) {
      submitButton.disabled = true;
      spinner.classList.remove('d-none');
      buttonText.classList.add('d-none');
    } else {
      submitButton.disabled = false;
      spinner.classList.add('d-none');
      buttonText.classList.remove('d-none');
    }
  }
</script>

<%- include('../partials/footer') %>
